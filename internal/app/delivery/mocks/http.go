// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/delivery/http.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	app "github.com/MisterMaks/go-yandex-shortener/internal/app"
	gomock "github.com/golang/mock/gomock"
)

// MockAppUsecaseInterface is a mock of AppUsecaseInterface interface.
type MockAppUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAppUsecaseInterfaceMockRecorder
}

// MockAppUsecaseInterfaceMockRecorder is the mock recorder for MockAppUsecaseInterface.
type MockAppUsecaseInterfaceMockRecorder struct {
	mock *MockAppUsecaseInterface
}

// NewMockAppUsecaseInterface creates a new mock instance.
func NewMockAppUsecaseInterface(ctrl *gomock.Controller) *MockAppUsecaseInterface {
	mock := &MockAppUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockAppUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppUsecaseInterface) EXPECT() *MockAppUsecaseInterfaceMockRecorder {
	return m.recorder
}

// GenerateShortURL mocks base method.
func (m *MockAppUsecaseInterface) GenerateShortURL(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateShortURL", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateShortURL indicates an expected call of GenerateShortURL.
func (mr *MockAppUsecaseInterfaceMockRecorder) GenerateShortURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateShortURL", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GenerateShortURL), id)
}

// GetInternalStats mocks base method.
func (m *MockAppUsecaseInterface) GetInternalStats() (app.InternalStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalStats")
	ret0, _ := ret[0].(app.InternalStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInternalStats indicates an expected call of GetInternalStats.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetInternalStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalStats", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetInternalStats))
}

// GetOrCreateURL mocks base method.
func (m *MockAppUsecaseInterface) GetOrCreateURL(rawURL string, userID uint) (*app.URL, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateURL", rawURL, userID)
	ret0, _ := ret[0].(*app.URL)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateURL indicates an expected call of GetOrCreateURL.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetOrCreateURL(rawURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateURL", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetOrCreateURL), rawURL, userID)
}

// GetOrCreateURLs mocks base method.
func (m *MockAppUsecaseInterface) GetOrCreateURLs(requestBatchURLs []app.RequestBatchURL, userID uint) ([]app.ResponseBatchURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateURLs", requestBatchURLs, userID)
	ret0, _ := ret[0].([]app.ResponseBatchURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateURLs indicates an expected call of GetOrCreateURLs.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetOrCreateURLs(requestBatchURLs, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateURLs", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetOrCreateURLs), requestBatchURLs, userID)
}

// GetURL mocks base method.
func (m *MockAppUsecaseInterface) GetURL(id string) (*app.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", id)
	ret0, _ := ret[0].(*app.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetURL(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetURL), id)
}

// GetUserURLs mocks base method.
func (m *MockAppUsecaseInterface) GetUserURLs(userID uint) ([]app.ResponseUserURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", userID)
	ret0, _ := ret[0].([]app.ResponseUserURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockAppUsecaseInterfaceMockRecorder) GetUserURLs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockAppUsecaseInterface)(nil).GetUserURLs), userID)
}

// Ping mocks base method.
func (m *MockAppUsecaseInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockAppUsecaseInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockAppUsecaseInterface)(nil).Ping))
}

// SendDeleteUserURLsInChan mocks base method.
func (m *MockAppUsecaseInterface) SendDeleteUserURLsInChan(userID uint, urlIDs []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendDeleteUserURLsInChan", userID, urlIDs)
}

// SendDeleteUserURLsInChan indicates an expected call of SendDeleteUserURLsInChan.
func (mr *MockAppUsecaseInterfaceMockRecorder) SendDeleteUserURLsInChan(userID, urlIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDeleteUserURLsInChan", reflect.TypeOf((*MockAppUsecaseInterface)(nil).SendDeleteUserURLsInChan), userID, urlIDs)
}
